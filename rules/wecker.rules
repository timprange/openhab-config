var Timer timerAlarm = null
val durationWecker = 1200000 //20 Minuten

val Functions$Function1 <String,Boolean> wakePerson = [person |

    val wecker = Wecker.members.findFirst[w | w.name == person+"_Wecker"] as GroupItem
    val isActive = wecker.members.findFirst[a | a.name == wecker.name+"_Aktiv"]

    //Functionbody

    sendCommand(isActive, ON)
    val lights = wecker.members.findFirst[l | l.name == wecker.name+"_Lampen"]

    var lightColor = wecker.members.findFirst[l | l.name == wecker.name+"_Farbtemperatur"]
    
    var Dimmer = 1
    val maxStufe = 25
    
    val heizungBefore = Bad_Heizung_Soll_Proxy.state as Number

    if(Bad_Heizung_Mode_General == 1){
    	Bad_Heizung_Soll_Proxy.sendCommand(21)
    }

    while(Dimmer<=maxStufe)
    {
       	sendCommand(lights, Dimmer++)
    	sendCommand(lightColor,100-(Dimmer*2))
        Thread::sleep(Math::round(durationWecker/maxStufe))
    }

    sendNotification("tim.prange@hotmail.de", "Aufstehen! Der Wecker klingelt!")

    if(Bad_Heizung_Mode_General == 1)
    {
        createTimer(now.plusMinutes(15),[|
            Bad_Heizung_Soll_Proxy.sendCommand(heizungBefore)
        ])
    }

    sendCommand(isActive, OFF)
    false
]

rule "Alarm Clock"
when
    Item Tim_Wecker_Timestamp changed
then
    if (Tim_Wecker_Timestamp.state as Number == 0) {
        if (timerAlarm !== null) {
            timerAlarm.cancel
            timerAlarm = null
        }
        logInfo("alarm", "All alarms are cancelled")
    } else {
        var epoch = new DateTime((Tim_Wecker_Timestamp.state as Number).longValue)
        logInfo("alarm", "Scheduling alarm for " +  epoch.toString)
        
        val epocheStart = epoch.minusMillis(durationWecker)
        
        if (timerAlarm !== null) {
            logInfo("alarm", "Reschedule alarm")
            timerAlarm.reschedule(epocheStart)
        } else {
            logInfo("alarm", "New Alarm")
            
            timerAlarm = createTimer(epocheStart,
                [|
                    // Turn on stuff, e.g. radio or light
                    logInfo("alarm", "Wecker gestartet")
                    wakePerson.apply("Tim")
                ]
            )
        }
    }
end