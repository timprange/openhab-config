var Timer timerAlarm = null
val durationWecker = 1200000 //20 Minuten

var Timer wakeUpTimer = null
var Dimmer = 1

rule "Alarm Clock Tim"
when
    Item Tim_Wecker_Aktiv changed to ON
then
    
    val maxStufe = 25
    val stepDuration = Math::round(durationWecker/maxStufe)
    
    val heizungBefore = Bad_Heizung_Soll_Proxy.state as Number
    Bad_Heizung_Soll_Proxy.sendCommand(21)

    wakeUpTimer = createTimer(now.plusMillis(stepDuration), [|
        sendCommand(Tim_Wecker_Lampen, Dimmer++)
    	sendCommand(Tim_Wecker_Farbtemperatur,100-(Dimmer*2))

        if(Dimmer >= maxStufe){ //Dimmer is at Max. Need to get up
            logInfo("alarm", "Waken Up")

            //reset Heating to the temperature before
               createTimer(now.plusMinutes(15),[|
                    Bad_Heizung_Soll_Proxy.sendCommand(heizungBefore)
                ])
            
            Dimmer = 1;
            Tim_Wecker_Aktiv.sendCommand(OFF)
       }
       else{ //Dimmer isn't maxed yet. Need to do next iteration
           logInfo("alarm", "Alarm rescheduled")
           wakeUpTimer.reschedule(now.plusMillis(stepDuration))
       }
    ]) 
end

rule "Alarm Clock"
when
    Item Tim_Wecker_Timestamp changed
then
    if (Tim_Wecker_Timestamp.state as Number == 0) {
        if (timerAlarm !== null) {
            timerAlarm.cancel
            timerAlarm = null
        }
        logInfo("alarm", "All alarms are cancelled")
    } else {
        var epoch = new DateTime((Tim_Wecker_Timestamp.state as Number).longValue)
        logInfo("alarm", "Scheduling alarm for " +  epoch.toString)
        
        val epocheStart = epoch.minusMillis(durationWecker)
        
        if (timerAlarm !== null) {
            logInfo("alarm", "Reschedule alarm")
            timerAlarm.reschedule(epocheStart)
        } else {
            logInfo("alarm", "New Alarm")
            
            timerAlarm = createTimer(epocheStart,
                [|
                    // Turn on stuff, e.g. radio or light
                    logInfo("alarm", "Wecker gestartet")
                    Tim_Wecker_Aktiv.send(ON)
                    timerAlarm = null
                ]
            )
        }
    }
end